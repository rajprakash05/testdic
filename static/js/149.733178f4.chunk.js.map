{"version":3,"file":"static/js/149.733178f4.chunk.js","mappings":"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","sources":["pages/Auth/resetConfirmPassword/ResetConfirm.js"],"sourcesContent":["import './ResetConfirm.scss';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport * as yup from 'yup';\r\nimport { Formik, Form } from 'formik';\r\nimport { Button, Stack, Typography, useMediaQuery } from '@mui/material';\r\nimport { appapi } from '../../../api/apiClient';\r\nimport { showmessage } from '../../../utils/toastr';\r\nimport { useParams, useNavigate } from 'react-router-dom'\r\nimport { buttonStyle1 } from '../../../utils/commonStyle';\r\nimport { colors } from '../../../utils/colors';\r\nimport mobilewavybg from '../../../assets/images/mobilewavybg.svg';\r\nimport diztextlogo from '../../../assets/images/diztextlogo.svg';\r\nimport wavesbg from '../../../assets/images/wavesbg.svg';\r\nimport SocialCard from '../../../components/SocialCard';\r\nimport dizlogoMobile from '../../../assets/images/dizlogoMobile.svg';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setLoading } from '../../../redux/features/appSlice';\r\nimport FormTextField from '../../../components/FormTextField';\r\n\r\n/**\r\n * Validation Schema for register\r\n */\r\nconst validationSchema = yup.object({\r\n    password: yup\r\n        .string('Enter your Password')\r\n        // .min(8, 'Password must be minimum of 6 characters')\r\n        // .max(12, 'Password must be maximum of 12 characters')\r\n        .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,12}$/, 'Enter a password of minimum 8 and maximum 12 characters with a combination of capital letters, small letters, symbols, and numbers.')\r\n        .required('Password is requried')\r\n        .trim(),\r\n    reConfirmPassword: yup\r\n        .string()\r\n        .oneOf([yup.ref('password'), null], 'Password must match')\r\n        .required('Retype Password is requried')\r\n        .trim(),\r\n})\r\n\r\nexport default function ResetConfirm() {\r\n\r\n    const paramsFromUrl = useParams()\r\n    const navigate = useNavigate()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formRef = useRef();\r\n\r\n    const isMobile = useMediaQuery('(max-width:1000px)');\r\n\r\n    const [visibility1, setVisibility1] = useState(false);\r\n    const [visibility2, setVisibility2] = useState(false);\r\n    const [data, setData] = useState({\r\n        password: '',\r\n        reConfirmPassword: ''\r\n    })\r\n\r\n    const [message, setMessage] = useState({\r\n        status: '',\r\n        msg: ''\r\n    });\r\n\r\n    /**\r\n     * New password creation\r\n     * @param {password, reconfirmPassword} obj \r\n     */\r\n    const reset = async (obj) => {\r\n        let params = {\r\n            params: {\r\n                verificationToken: paramsFromUrl.verificationToken\r\n            }\r\n        }\r\n        let payload = {\r\n            password: obj.password,\r\n        }\r\n        const response = await appapi.post(`/auth/reset-password`, payload, params)\r\n        if (response.ok) {\r\n            const data = response.data;\r\n            if (data.status === 'success') {\r\n                showmessage(data.message)\r\n                navigate('/login')\r\n            } else {\r\n                showmessage(data.message, 2000, 'error')\r\n            }\r\n        } else {\r\n            // showmessage(`Something Went Wrong!`, 2000, 'error')\r\n        }\r\n    }\r\n\r\n    /**\r\n   * @returns Redirect to initial page which is login\r\n   */\r\n    const onClickLoginRoute = () => navigate(`/login`)\r\n\r\n    const handleVerificationToken = async () => {\r\n        dispatch(setLoading(true))\r\n        let params = {\r\n            params: {\r\n                verificationToken: paramsFromUrl.verificationToken\r\n            }\r\n        }\r\n        const response = await appapi.post(`/auth/verifyResetToken`, {}, params);\r\n        if (response.ok) {\r\n            const data = response.data;\r\n            dispatch(setLoading(false))\r\n            setMessage({\r\n                status: data.status,\r\n                msg: data.message\r\n            })\r\n        } else {\r\n            dispatch(setLoading(false))\r\n            // showmessage(`Something Went Wrong!`, 2000, 'error')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleVerificationToken()\r\n    }, []);\r\n\r\n    const ResetForm = () => {\r\n        return (\r\n            <>\r\n                <Typography className='fw-bold ff-Roboto createHeading' color={colors.primaryTxt}> Reset your Password </Typography>\r\n                <Formik\r\n                    innerRef={formRef}\r\n                    enableReinitialize={true}\r\n                    initialValues={{\r\n                        password: data?.password || '',\r\n                        reConfirmPassword: data?.reConfirmPassword\r\n                    }}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values) => reset(values)}\r\n                >\r\n                    {({ handleSubmit, values, handleChange, errors, touched, handleBlur, isValid, dirty }) => (\r\n                        <Form style={{ minHeight: '484px' }} noValidate autoComplete=\"off\">\r\n                            <Stack flex={1} className='mt-9'>\r\n                                <FormTextField label=\"Password\" name=\"password\" type='password' sx={{ mb: 0 }}\r\n                                    visibility={visibility1}\r\n                                    setVisibility={(val) => setVisibility1(val)}\r\n                                />\r\n                            </Stack>\r\n                            <Stack flex={1} className='mt-9'>\r\n                                <FormTextField label=\"Retype Password\" name=\"reConfirmPassword\" type='password' sx={{ mb: 0 }}\r\n                                    visibility={visibility2}\r\n                                    setVisibility={(val) => setVisibility2(val)}\r\n                                />\r\n                            </Stack>\r\n                            <Button sx={{ ...buttonStyle1, marginBottom: '0', width: '100%' }} disabled={!(dirty && isValid)} type='submit'>Reset</Button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='resetConfirmContainer' style={{ padding: isMobile ? '16px' : '0', minHeight: isMobile ? 'auto' : '100vh' }}>\r\n            {\r\n                isMobile ?\r\n                    <div className='mobileViewContainer' style={{ minHeight: 'calc(100vh - 32px)' }}>\r\n                        <div style={{ backgroundImage: `url(${mobilewavybg})`, minHeight: 'calc(100vh - 32px)', backgroundPosition: 'center bottom', backgroundRepeat: 'no-repeat' }}>\r\n                            <div className='logoImg' style={{ marginLeft: '8px' }}>\r\n                                <img alt='dizLogo' src={dizlogoMobile} />\r\n                            </div>\r\n                            {\r\n                                message.status && message.status !== 'success' ?\r\n                                    <div className='innerContainer' style={{ marginTop: '240px' }}>\r\n                                        <Stack>\r\n                                            <Typography className='fw-bold ff-Roboto createHeading' color={colors.primaryTxt}> {message.status ? message.status === 'success' ? 'Successful!' : 'Failed!' : ''} </Typography>\r\n                                            <Typography className='fs-12 ff-Roboto fw-regular' color={colors.blackMain} style={{ marginBottom: '6px' }}>\r\n                                                {message.msg}\r\n                                            </Typography>\r\n                                            <Button sx={{ ...buttonStyle1, textTransform: 'capitalize', marginBottom: '0' }} onClick={onClickLoginRoute} type='submit'>Go Back To Login</Button>\r\n                                        </Stack>\r\n                                    </div>\r\n                                    :\r\n                                    <div className='innerContainer' style={{ marginTop: '136px' }}>\r\n                                        {ResetForm()}\r\n                                    </div>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <Stack style={{ maxWidth: '1368px', margin: 'auto', minHeight: '758.64px' }} direction='row' justifyContent='space-between'>\r\n                        <Stack className='leftStack' style={{ width: '100%' }}>\r\n                            <div className='logoImg'>\r\n                                <img style={{ visibility: 'hidden' }} alt='dizLogo' src={diztextlogo} />\r\n                            </div>\r\n                            <div className='detailContainer' style={{ backgroundImage: `url(${wavesbg})` }}>\r\n                            </div>\r\n                            <Stack className='formSubmittedStyle'>\r\n                                <div className='logoImg'>\r\n                                    <img alt='dizLogo' src={diztextlogo} />\r\n                                </div>\r\n                                {\r\n                                    message.status && message.status !== 'success' ?\r\n                                        <div style={{ marginTop: '22.916666666667vh' }}>\r\n                                            <Stack>\r\n                                                <Typography className='fw-bold ff-Roboto createHeading' color={colors.primaryTxt}> {message.status ? message.status === 'success' ? 'Successful!' : 'Failed!' : ''} </Typography>\r\n                                                <Typography className='fs-12 ff-Roboto fw-regular' color={colors.blackMain} style={{ marginBottom: '6px' }}>\r\n                                                    {message.msg}\r\n                                                </Typography>\r\n                                                <Button sx={{ ...buttonStyle1, textTransform: 'capitalize', marginBottom: '0' }} onClick={onClickLoginRoute} type='submit'>Go Back To Login</Button>\r\n                                            </Stack>\r\n                                        </div> :\r\n                                        <div style={{ marginTop: '5.2083333333333vh' }}>\r\n                                            {ResetForm()}\r\n                                        </div>\r\n                                }\r\n\r\n                            </Stack>\r\n                        </Stack>\r\n                    </Stack>\r\n            }\r\n            {\r\n                isMobile ?\r\n                    <Stack className='footer' direction='row' justifyContent='space-between'>\r\n                        <Stack className='socialContainer' direction='row'>\r\n                            {\r\n                                <SocialCard />\r\n                            }\r\n                        </Stack>\r\n                        <Typography className='fs-10 ff-Roboto fw-medium black dizcopyrights'>© 2022 Do It Zero Inc.</Typography>\r\n                    </Stack>\r\n                    :\r\n                    <Stack className='footerWeb'>\r\n                        <Stack className='socialContainer flex-justifycenter' style={{\r\n                            margin: '3.125vh auto 3.125vh'\r\n                        }} direction='row'>\r\n                            {\r\n                                <SocialCard />\r\n                            }\r\n                        </Stack>\r\n                        <Typography className='fs-10 ff-Roboto fw-medium black dizcopyrights'>© 2022 Do It Zero Inc.</Typography>\r\n                    </Stack>\r\n            }\r\n        </div>\r\n    )\r\n}"],"names":["validationSchema","yup","password","matches","required","trim","reConfirmPassword","oneOf","ResetConfirm","paramsFromUrl","useParams","navigate","useNavigate","dispatch","useDispatch","formRef","useRef","isMobile","useMediaQuery","useState","visibility1","setVisibility1","visibility2","setVisibility2","data","status","msg","message","setMessage","reset","obj","params","verificationToken","payload","appapi","response","ok","showmessage","onClickLoginRoute","handleVerificationToken","setLoading","useEffect","ResetForm","Typography","className","color","colors","innerRef","enableReinitialize","initialValues","onSubmit","values","handleSubmit","handleChange","errors","touched","handleBlur","isValid","dirty","style","minHeight","noValidate","autoComplete","Stack","flex","FormTextField","label","name","type","sx","mb","visibility","setVisibility","val","Button","buttonStyle1","marginBottom","width","disabled","padding","backgroundImage","mobilewavybg","backgroundPosition","backgroundRepeat","marginLeft","alt","src","dizlogoMobile","marginTop","textTransform","onClick","maxWidth","margin","direction","justifyContent","diztextlogo","wavesbg","SocialCard"],"sourceRoot":""}