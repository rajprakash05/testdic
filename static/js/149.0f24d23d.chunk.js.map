{"version":3,"file":"static/js/149.0f24d23d.chunk.js","mappings":"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","sources":["pages/Auth/resetConfirmPassword/ResetConfirm.js"],"sourcesContent":["import \"./ResetConfirm.scss\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport * as yup from \"yup\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Button, Stack, Typography, useMediaQuery } from \"@mui/material\";\r\nimport appapi from \"../../../api/apiClient\";\r\nimport { showmessage } from \"../../../utils/toastr\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { buttonStyle1 } from \"../../../utils/commonStyle\";\r\nimport { colors } from \"../../../utils/colors\";\r\nimport mobilewavybg from \"../../../assets/images/mobilewavybg.svg\";\r\nimport diztextlogo from \"../../../assets/images/diztextlogo.svg\";\r\nimport wavesbg from \"../../../assets/images/wavesbg.svg\";\r\nimport SocialCard from \"../../../components/SocialCard\";\r\nimport dizlogoMobile from \"../../../assets/images/dizlogoMobile.svg\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setLoading } from \"../../../redux/features/appSlice\";\r\nimport FormTextField from \"../../../components/FormTextField\";\r\n\r\n/**\r\n * Validation Schema for register\r\n */\r\nconst validationSchema = yup.object({\r\n  password: yup\r\n    .string(\"Enter your Password\")\r\n    // .min(8, 'Password must be minimum of 6 characters')\r\n    // .max(12, 'Password must be maximum of 12 characters')\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,12}$/,\r\n      \"Enter a password of minimum 8 and maximum 12 characters with a combination of capital letters, small letters, symbols, and numbers.\"\r\n    )\r\n    .required(\"Password is requried\")\r\n    .trim(),\r\n  reConfirmPassword: yup\r\n    .string()\r\n    .oneOf([yup.ref(\"password\"), null], \"Password must match\")\r\n    .required(\"Retype Password is requried\")\r\n    .trim(),\r\n});\r\n\r\nexport default function ResetConfirm() {\r\n  const paramsFromUrl = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const formRef = useRef();\r\n\r\n  const isMobile = useMediaQuery(\"(max-width:1000px)\");\r\n\r\n  const [visibility1, setVisibility1] = useState(false);\r\n  const [visibility2, setVisibility2] = useState(false);\r\n  const [data, setData] = useState({\r\n    password: \"\",\r\n    reConfirmPassword: \"\",\r\n  });\r\n\r\n  const [message, setMessage] = useState({\r\n    status: \"\",\r\n    msg: \"\",\r\n  });\r\n\r\n  /**\r\n   * New password creation\r\n   * @param {password, reconfirmPassword} obj\r\n   */\r\n  const reset = async (obj) => {\r\n    let params = {\r\n      params: {\r\n        verificationToken: paramsFromUrl.verificationToken,\r\n      },\r\n    };\r\n    let payload = {\r\n      password: obj.password,\r\n    };\r\n    const response = await appapi.post(`/auth/reset-password`, payload, params);\r\n    if (response.ok) {\r\n      const data = response.data;\r\n      if (data.status === \"success\") {\r\n        showmessage(data.message);\r\n        navigate(\"/login\");\r\n      } else {\r\n        showmessage(data.message, \"error\");\r\n      }\r\n    } else {\r\n      // showmessage(`Something Went Wrong!`, 2000, 'error')\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @returns Redirect to initial page which is login\r\n   */\r\n  const onClickLoginRoute = () => navigate(`/login`);\r\n\r\n  const handleVerificationToken = async () => {\r\n    dispatch(setLoading(true));\r\n    let params = {\r\n      params: {\r\n        verificationToken: paramsFromUrl.verificationToken,\r\n      },\r\n    };\r\n    const response = await appapi.post(`/auth/verifyResetToken`, {}, params);\r\n    if (response.ok) {\r\n      const data = response.data;\r\n      dispatch(setLoading(false));\r\n      setMessage({\r\n        status: data.status,\r\n        msg: data.message,\r\n      });\r\n    } else {\r\n      dispatch(setLoading(false));\r\n      // showmessage(`Something Went Wrong!`, 2000, 'error')\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleVerificationToken();\r\n  }, []);\r\n\r\n  const ResetForm = () => {\r\n    return (\r\n      <>\r\n        <Typography\r\n          className=\"fw-bold ff-Roboto createHeading\"\r\n          color={colors.primaryTxt}\r\n        >\r\n          {\" \"}\r\n          Reset your Password{\" \"}\r\n        </Typography>\r\n        <Formik\r\n          innerRef={formRef}\r\n          enableReinitialize={true}\r\n          initialValues={{\r\n            password: data?.password || \"\",\r\n            reConfirmPassword: data?.reConfirmPassword,\r\n          }}\r\n          validationSchema={validationSchema}\r\n          onSubmit={(values) => reset(values)}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            values,\r\n            handleChange,\r\n            errors,\r\n            touched,\r\n            handleBlur,\r\n            isValid,\r\n            dirty,\r\n          }) => (\r\n            <Form style={{ minHeight: \"484px\" }} noValidate autoComplete=\"off\">\r\n              <Stack flex={1} className=\"mt-9\">\r\n                <FormTextField\r\n                  label=\"Password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  sx={{ mb: 0 }}\r\n                  visibility={visibility1}\r\n                  setVisibility={(val) => setVisibility1(val)}\r\n                />\r\n              </Stack>\r\n              <Stack flex={1} className=\"mt-9\">\r\n                <FormTextField\r\n                  label=\"Retype Password\"\r\n                  name=\"reConfirmPassword\"\r\n                  type=\"password\"\r\n                  sx={{ mb: 0 }}\r\n                  visibility={visibility2}\r\n                  setVisibility={(val) => setVisibility2(val)}\r\n                />\r\n              </Stack>\r\n              <Button\r\n                sx={{ ...buttonStyle1, marginBottom: \"0\", width: \"100%\" }}\r\n                disabled={!(dirty && isValid)}\r\n                type=\"submit\"\r\n              >\r\n                Reset\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"resetConfirmContainer\"\r\n      style={{\r\n        padding: isMobile ? \"16px\" : \"0\",\r\n        minHeight: isMobile ? \"auto\" : \"100vh\",\r\n      }}\r\n    >\r\n      {isMobile ? (\r\n        <div\r\n          className=\"mobileViewContainer\"\r\n          style={{ minHeight: \"calc(100vh - 32px)\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              backgroundImage: `url(${mobilewavybg})`,\r\n              minHeight: \"calc(100vh - 32px)\",\r\n              backgroundPosition: \"center bottom\",\r\n              backgroundRepeat: \"no-repeat\",\r\n            }}\r\n          >\r\n            <div className=\"logoImg\" style={{ marginLeft: \"8px\" }}>\r\n              <img alt=\"dizLogo\" src={dizlogoMobile} />\r\n            </div>\r\n            {message.status && message.status !== \"success\" ? (\r\n              <div className=\"innerContainer\" style={{ marginTop: \"240px\" }}>\r\n                <Stack>\r\n                  <Typography\r\n                    className=\"fw-bold ff-Roboto createHeading\"\r\n                    color={colors.primaryTxt}\r\n                  >\r\n                    {\" \"}\r\n                    {message.status\r\n                      ? message.status === \"success\"\r\n                        ? \"Successful!\"\r\n                        : \"Failed!\"\r\n                      : \"\"}{\" \"}\r\n                  </Typography>\r\n                  <Typography\r\n                    className=\"fs-12 ff-Roboto fw-regular\"\r\n                    color={colors.blackMain}\r\n                    style={{ marginBottom: \"6px\" }}\r\n                  >\r\n                    {message.msg}\r\n                  </Typography>\r\n                  <Button\r\n                    sx={{\r\n                      ...buttonStyle1,\r\n                      textTransform: \"capitalize\",\r\n                      marginBottom: \"0\",\r\n                    }}\r\n                    onClick={onClickLoginRoute}\r\n                    type=\"submit\"\r\n                  >\r\n                    Go Back To Login\r\n                  </Button>\r\n                </Stack>\r\n              </div>\r\n            ) : (\r\n              <div className=\"innerContainer\" style={{ marginTop: \"136px\" }}>\r\n                {ResetForm()}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Stack\r\n          style={{ maxWidth: \"1368px\", margin: \"auto\", minHeight: \"758.64px\" }}\r\n          direction=\"row\"\r\n          justifyContent=\"space-between\"\r\n        >\r\n          <Stack className=\"leftStack\" style={{ width: \"100%\" }}>\r\n            <div className=\"logoImg\">\r\n              <img\r\n                style={{ visibility: \"hidden\" }}\r\n                alt=\"dizLogo\"\r\n                src={diztextlogo}\r\n              />\r\n            </div>\r\n            <div\r\n              className=\"detailContainer\"\r\n              style={{ backgroundImage: `url(${wavesbg})` }}\r\n            ></div>\r\n            <Stack className=\"formSubmittedStyle\">\r\n              <div className=\"logoImg\">\r\n                <img alt=\"dizLogo\" src={diztextlogo} />\r\n              </div>\r\n              {message.status && message.status !== \"success\" ? (\r\n                <div style={{ marginTop: \"22.916666666667vh\" }}>\r\n                  <Stack>\r\n                    <Typography\r\n                      className=\"fw-bold ff-Roboto createHeading\"\r\n                      color={colors.primaryTxt}\r\n                    >\r\n                      {\" \"}\r\n                      {message.status\r\n                        ? message.status === \"success\"\r\n                          ? \"Successful!\"\r\n                          : \"Failed!\"\r\n                        : \"\"}{\" \"}\r\n                    </Typography>\r\n                    <Typography\r\n                      className=\"fs-12 ff-Roboto fw-regular\"\r\n                      color={colors.blackMain}\r\n                      style={{ marginBottom: \"6px\" }}\r\n                    >\r\n                      {message.msg}\r\n                    </Typography>\r\n                    <Button\r\n                      sx={{\r\n                        ...buttonStyle1,\r\n                        textTransform: \"capitalize\",\r\n                        marginBottom: \"0\",\r\n                      }}\r\n                      onClick={onClickLoginRoute}\r\n                      type=\"submit\"\r\n                    >\r\n                      Go Back To Login\r\n                    </Button>\r\n                  </Stack>\r\n                </div>\r\n              ) : (\r\n                <div style={{ marginTop: \"5.2083333333333vh\" }}>\r\n                  {ResetForm()}\r\n                </div>\r\n              )}\r\n            </Stack>\r\n          </Stack>\r\n        </Stack>\r\n      )}\r\n      {isMobile ? (\r\n        <Stack\r\n          className=\"footer\"\r\n          direction=\"row\"\r\n          justifyContent=\"space-between\"\r\n        >\r\n          <Stack className=\"socialContainer\" direction=\"row\">\r\n            {<SocialCard />}\r\n          </Stack>\r\n          <Typography className=\"fs-10 ff-Roboto fw-medium black dizcopyrights\">\r\n            © 2022 Do It Zero Inc.\r\n          </Typography>\r\n        </Stack>\r\n      ) : (\r\n        <Stack className=\"footerWeb\">\r\n          <Stack\r\n            className=\"socialContainer flex-justifycenter\"\r\n            style={{\r\n              margin: \"3.125vh auto 3.125vh\",\r\n            }}\r\n            direction=\"row\"\r\n          >\r\n            {<SocialCard />}\r\n          </Stack>\r\n          <Typography className=\"fs-10 ff-Roboto fw-medium black dizcopyrights\">\r\n            © 2022 Do It Zero Inc.\r\n          </Typography>\r\n        </Stack>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":["validationSchema","yup","password","matches","required","trim","reConfirmPassword","oneOf","ResetConfirm","paramsFromUrl","useParams","navigate","useNavigate","dispatch","useDispatch","formRef","useRef","isMobile","useMediaQuery","useState","visibility1","setVisibility1","visibility2","setVisibility2","data","status","msg","message","setMessage","reset","obj","params","verificationToken","payload","appapi","response","ok","showmessage","onClickLoginRoute","handleVerificationToken","setLoading","useEffect","ResetForm","Typography","className","color","colors","innerRef","enableReinitialize","initialValues","onSubmit","values","handleSubmit","handleChange","errors","touched","handleBlur","isValid","dirty","style","minHeight","noValidate","autoComplete","Stack","flex","FormTextField","label","name","type","sx","mb","visibility","setVisibility","val","Button","buttonStyle1","marginBottom","width","disabled","padding","backgroundImage","mobilewavybg","backgroundPosition","backgroundRepeat","marginLeft","alt","src","dizlogoMobile","marginTop","textTransform","onClick","maxWidth","margin","direction","justifyContent","diztextlogo","wavesbg","SocialCard"],"sourceRoot":""}