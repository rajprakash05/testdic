{"version":3,"file":"static/js/149.7eb574e4.chunk.js","mappings":"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","sources":["pages/Auth/resetConfirmPassword/ResetConfirm.js"],"sourcesContent":["import './ResetConfirm.scss';\r\nimport React, { useState } from 'react';\r\nimport * as yup from 'yup';\r\nimport { useFormik } from 'formik';\r\nimport { TextField, Button, Stack, InputAdornment, IconButton, Typography, useMediaQuery } from '@mui/material';\r\nimport { appapi } from '../../../api/apiClient';\r\nimport { showmessage } from '../../../utils/toastr';\r\nimport { useParams, useNavigate } from 'react-router-dom'\r\nimport { buttonStyle1 } from '../../../utils/commonStyle';\r\nimport { colors } from '../../../utils/colors';\r\nimport mobilewavybg from '../../../assets/images/mobilewavybg.svg';\r\nimport diztextlogo from '../../../assets/images/diztextlogo.svg';\r\nimport wavesbg from '../../../assets/images/wavesbg.svg';\r\nimport VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined';\r\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined';\r\nimport SocialCard from '../../../components/SocialCard';\r\nimport dizlogoMobile from '../../../assets/images/dizlogoMobile.svg';\r\n\r\n/**\r\n * Validation Schema for register\r\n */\r\nconst validationSchema = yup.object({\r\n    password: yup\r\n        .string('Enter your Password')\r\n        // .min(8, 'Password must be minimum of 6 characters')\r\n        // .max(12, 'Password must be maximum of 12 characters')\r\n        .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,12}$/, 'Enter a password of minimum 8 characters with a combination of capital letters, small letters, symbols, and numbers.')\r\n        .required('Password is requried')\r\n        .trim(),\r\n    reConfirmPassword: yup\r\n        .string()\r\n        .oneOf([yup.ref('password'), null], 'Passwords must match')\r\n        .required('Retype Password is requried')\r\n        .trim(),\r\n})\r\n\r\nexport default function ResetConfirm() {\r\n\r\n    const paramsFromUrl = useParams()\r\n    const navigate = useNavigate()\r\n\r\n    const isMobile = useMediaQuery('(max-width:1000px)');\r\n\r\n    const [visibility1, setVisibility1] = useState(false);\r\n    const [visibility2, setVisibility2] = useState(false);\r\n    const [data, setData] = useState({\r\n        password: '',\r\n        reConfirmPassword: ''\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: data,\r\n        validationSchema: validationSchema,\r\n        validateOnBlur: true,\r\n        validateOnChange: true,\r\n        onSubmit: (values) => {\r\n            reset(values)\r\n        },\r\n    })\r\n\r\n\r\n    /**\r\n     * New password creation\r\n     * @param {password, reconfirmPassword} obj \r\n     */\r\n    const reset = async (obj) => {\r\n        let params = {\r\n            params: {\r\n                verificationToken: paramsFromUrl.verificationToken\r\n            }\r\n        }\r\n        let payload = {\r\n            password: obj.password,\r\n        }\r\n        const response = await appapi.post(`/auth/reset-password`, payload, params)\r\n        if (response.ok) {\r\n            const data = response.data;\r\n            if (data.status === 'success') {\r\n                showmessage(data.message)\r\n                navigate('/')\r\n            } else {\r\n                showmessage(data.message, 5000, 'error')\r\n            }\r\n        } else {\r\n            showmessage(`Something Went Wrong!`, 5000, 'error')\r\n        }\r\n    }\r\n\r\n    const ResetForm = ({ handleSubmit, values, handleChange, errors, touched, handleBlur, isValid, dirty }) => {\r\n        return (\r\n            <>\r\n                <Typography className='fw-bold ff-Roboto createHeading' color={colors.primaryTxt}> Reset your Password </Typography>\r\n                <form style={{ minHeight: '484px' }} onSubmit={handleSubmit}>\r\n                    <Stack>\r\n                        <Stack className='mt-9 passwordField'>\r\n                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                <Typography className='fs-14 ff-Roboto fw-medium mb-7' color={colors.blackMain}>Password</Typography>\r\n                            </div>\r\n                            <TextField\r\n                                fullWidth\r\n                                id='password'\r\n                                name='password'\r\n                                value={values.password.trim() || ''}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                type={visibility1 ? 'text' : 'password'}\r\n                                // error={touched.password && Boolean(errors.password)}\r\n                                className={values.password ? 'helperTextStyleblack' : 'helperTextStylered'}\r\n                                helperText={(touched.password || dirty.password) && errors.password}\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position='end'>\r\n                                            {\r\n                                                <IconButton onClick={() => setVisibility1(!visibility1)}>\r\n                                                    {visibility1 ? <VisibilityOutlinedIcon /> : <VisibilityOffOutlinedIcon />}\r\n                                                </IconButton>\r\n                                            }\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Stack>\r\n                        <Stack className='mt-9 passwordField'>\r\n                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                <Typography className='fs-14 ff-Roboto fw-medium mb-7' color={colors.blackMain}>Retype Password</Typography>\r\n                            </div>\r\n                            <TextField\r\n                                fullWidth\r\n                                id='reConfirmPassword'\r\n                                name='reConfirmPassword'\r\n                                value={values.reConfirmPassword.trim() || ''}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                type={visibility2 ? 'text' : 'password'}\r\n                                // error={touched.reConfirmPassword && Boolean(errors.reConfirmPassword)}\r\n                                className={values.reConfirmPassword ? 'helperTextStyleblack' : 'helperTextStylered'}\r\n                                helperText={(touched.reConfirmPassword || dirty.reConfirmPassword) && errors.reConfirmPassword}\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position='end'>\r\n                                            {\r\n                                                <IconButton onClick={() => setVisibility2(!visibility2)}>\r\n                                                    {visibility2 ? <VisibilityOutlinedIcon /> : <VisibilityOffOutlinedIcon />}\r\n                                                </IconButton>\r\n                                            }\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Stack>\r\n                        <Button sx={{ ...buttonStyle1, marginBottom: '0' }} disabled={!(dirty && isValid)} type='submit'>Reset</Button>\r\n                    </Stack>\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='resetConfirmContainer' style={{ padding: isMobile ? '16px' : '0', minHeight: isMobile ? 'auto' : '100vh' }}>\r\n            {\r\n                isMobile ?\r\n                    <div className='mobileViewContainer' style={{ minHeight: 'calc(100vh - 32px)' }}>\r\n                        <div style={{ backgroundImage: `url(${mobilewavybg})`, minHeight: 'calc(100vh - 32px)', backgroundPosition: 'center bottom', backgroundRepeat: 'no-repeat' }}>\r\n                            <div className='logoImg' style={{ marginLeft: '8px' }}>\r\n                                <img alt='dizLogo' src={dizlogoMobile} />\r\n                            </div>\r\n                            <div className='innerContainer' style={{ marginTop: '136px' }}>\r\n                                {ResetForm({ ...formik })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <Stack style={{ maxWidth: '1368px', margin: 'auto', minHeight: '758.64px' }} direction='row' justifyContent='space-between'>\r\n                        <Stack className='leftStack' style={{ width: '100%' }}>\r\n                            <div className='logoImg'>\r\n                                <img style={{ visibility: 'hidden' }} alt='dizLogo' src={diztextlogo} />\r\n                            </div>\r\n                            <div className='detailContainer' style={{ backgroundImage: `url(${wavesbg})` }}>\r\n                            </div>\r\n                            <Stack className='formSubmittedStyle'>\r\n                                <div className='logoImg'>\r\n                                    <img alt='dizLogo' src={diztextlogo} />\r\n                                </div>\r\n                                <div style={{ marginTop: '5.2083333333333vh' }}>\r\n                                    {ResetForm({ ...formik })}\r\n                                </div>\r\n                            </Stack>\r\n                        </Stack>\r\n                    </Stack>\r\n            }\r\n            {\r\n                isMobile ?\r\n                    <Stack className='footer' direction='row' justifyContent='space-between'>\r\n                        <Stack className='socialContainer' direction='row'>\r\n                            {\r\n                                <SocialCard />\r\n                            }\r\n                        </Stack>\r\n                        <Typography className='fs-10 ff-Roboto fw-medium black dizcopyrights'>© 2022 Do it Zero Inc.</Typography>\r\n                    </Stack>\r\n                    :\r\n                    <Stack className='footerWeb'>\r\n                        <Stack className='socialContainer flex-justifycenter' style={{\r\n                            margin: '3.125vh auto 3.125vh'\r\n                        }} direction='row'>\r\n                            {\r\n                                <SocialCard />\r\n                            }\r\n                        </Stack>\r\n                        <Typography className='fs-10 ff-Roboto fw-medium black dizcopyrights'>© 2022 Do it Zero Inc.</Typography>\r\n                    </Stack>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n"],"names":["validationSchema","yup","password","matches","required","trim","reConfirmPassword","oneOf","ResetConfirm","paramsFromUrl","useParams","navigate","useNavigate","isMobile","useMediaQuery","useState","visibility1","setVisibility1","visibility2","setVisibility2","data","formik","useFormik","enableReinitialize","initialValues","validateOnBlur","validateOnChange","onSubmit","values","reset","obj","params","verificationToken","payload","appapi","response","ok","status","showmessage","message","ResetForm","handleSubmit","handleChange","errors","touched","handleBlur","isValid","dirty","Typography","className","color","colors","style","minHeight","Stack","display","justifyContent","alignItems","TextField","fullWidth","id","name","value","onChange","onBlur","type","helperText","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","VisibilityOutlined","VisibilityOffOutlined","Button","sx","buttonStyle1","marginBottom","disabled","padding","backgroundImage","mobilewavybg","backgroundPosition","backgroundRepeat","marginLeft","alt","src","dizlogoMobile","marginTop","maxWidth","margin","direction","width","visibility","diztextlogo","wavesbg","SocialCard"],"sourceRoot":""}