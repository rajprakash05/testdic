{"version":3,"file":"static/js/347.d33ea5e3.chunk.js","mappings":"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","sources":["pages/Auth/login/Login.js"],"sourcesContent":["import './Login.scss';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as yup from 'yup';\r\nimport { useFormik } from 'formik';\r\nimport { TextField, Button, Stack, InputAdornment, IconButton, Typography, useMediaQuery } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { appapi } from '../../../api/apiClient';\r\nimport { showmessage } from '../../../utils/toastr'\r\nimport { login } from '../../../redux/features/authSlice';\r\nimport { buttonStyle1 } from '../../../utils/commonStyle';\r\nimport { setLoading } from '../../../redux/features/appSlice';\r\nimport { encrypt } from '../../../utils/Crpyto';\r\nimport { colors } from '../../../utils/colors';\r\nimport mobilewavybg from '../../../assets/images/mobilewavybg.svg';\r\nimport diztextlogo from '../../../assets/images/diztextlogo.svg';\r\nimport dizlogoMobile from '../../../assets/images/dizlogoMobile.svg';\r\nimport wavesbg from '../../../assets/images/wavesbg.svg';\r\nimport VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined';\r\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined';\r\nimport SocialCard from '../../../components/SocialCard';\r\n\r\n/**\r\n * Validation Schema for register\r\n */\r\nconst validationSchema = yup.object({\r\n    email: yup\r\n        .string('Enter your Email')\r\n        .matches(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/, 'Email is Invalid')\r\n        .required('')\r\n        .trim(),\r\n    password: yup\r\n        .string('Enter your Password')\r\n        // .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,12}$/, 'Enter a password of minimum 8 characters with a combination of capital letters, small letters, symbols, and numbers.')\r\n        .required('')\r\n        .trim(),\r\n})\r\n\r\nexport default function Login() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isMobile = useMediaQuery('(max-width:1000px)');\r\n\r\n    const navigate = useNavigate();\r\n    const [visibility, setVisibility] = useState(false);\r\n    const [data, setData] = useState({\r\n        email: '',\r\n        password: '',\r\n    })\r\n\r\n    const [showErrorEmail, setShowErrorEmail] = useState(undefined)\r\n    const [showErrorPassword, setShowErrorPassword] = useState(undefined)\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        validateOnMount: true,\r\n        initialValues: data,\r\n        validationSchema: validationSchema,\r\n        validateOnBlur: true,\r\n        validateOnChange: true,\r\n        onSubmit: (values) => {\r\n            Login(values)\r\n        },\r\n    })\r\n\r\n    /**\r\n     * @param {email, password} obj \r\n     * Login user\r\n     */\r\n    const Login = async (obj) => {\r\n        dispatch(setLoading(true))\r\n        let payload = {\r\n            emailId: obj.email,\r\n            password: obj.password,\r\n            deviceId: '123'\r\n        }\r\n        let dataObj = {}\r\n        const response = await appapi.post('/auth/login', payload)\r\n        if (response.ok) {\r\n            dispatch(setLoading(false))\r\n            const data = response.data;\r\n            if (data.status === 'success') {\r\n                // showmessage(data.message)\r\n                dataObj = { ...data.data }\r\n                let encryptedData = encrypt(JSON.stringify(data.data))\r\n                localStorage.setItem('diz', encryptedData)\r\n                appapi.setHeader('Authorization', `Bearer ${data.data.accessToken}`);\r\n                dispatch(login(dataObj))\r\n            } else {\r\n                showmessage(data.message, 2000, 'error')\r\n            }\r\n        } else {\r\n            dispatch(setLoading(false))\r\n            if (response.status === 400) {\r\n                let error = response.data.errors[0].message.replace('body.emailId', 'Email Id')\r\n                showmessage(error, 2000, 'error')\r\n            }\r\n\r\n        }\r\n        // window.grecaptcha.ready(() => {\r\n        //     window.grecaptcha.execute('6LcITGEiAAAAADGUUGlHBNPQORmedLAhyeel4mSJ', { action: 'submit' }).then(async (token) => {\r\n\r\n        //     });\r\n        // });\r\n    }\r\n\r\n    const handleSignUpNavigate = () => {\r\n        navigate('/signup')\r\n    }\r\n\r\n    const { values, errors } = formik;\r\n\r\n    /**\r\n     * \r\n     * @returns redirect to forgotPassword Page\r\n     */\r\n    const onClickForgotPassword = () => {\r\n        if (!Boolean(errors.email)) {\r\n            navigate(`/forgotPassword`, { state: { email: values.email } })\r\n        } else {\r\n            navigate(`/forgotPassword`, { state: { email: '' } })\r\n        }\r\n    }\r\n\r\n    const loginForm = ({ handleSubmit, values, handleChange, errors, touched, handleBlur, isValid, dirty, isSubmitting }) => {\r\n        return (\r\n            <>\r\n                <Typography className='fw-bold ff-Roboto createHeading' color={colors.primaryTxt}> Login </Typography>\r\n                <form style={{ minHeight: '484px' }} onSubmit={handleSubmit}>\r\n                    <Stack>\r\n                        <Stack className='mt-9'>\r\n                            <Typography className='fs-14 ff-Roboto fw-medium mb-7' color={colors.blackMain}>Email</Typography>\r\n                            <TextField\r\n                                fullWidth\r\n                                id='email'\r\n                                name='email'\r\n                                value={values.email.toLowerCase().trim() || ''}\r\n                                onChange={(e) => {\r\n                                    if (e.target.value) {\r\n                                        setShowErrorEmail(undefined)\r\n\r\n                                    }\r\n                                    handleChange(e);\r\n                                }}\r\n                                onBlur={(e) => {\r\n                                    const re = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\r\n                                    let flag = re.test(e.target.value);\r\n                                    if (e.target.value && !flag) {\r\n                                        setShowErrorEmail('Email is Invalid');\r\n                                    }\r\n                                    handleBlur(e);\r\n                                }}\r\n                                // error={touched.email && Boolean(errors.email)}\r\n                                helperText={(touched.email) && showErrorEmail}\r\n                                autoComplete='off'\r\n                            />\r\n                        </Stack>\r\n                        <Stack className='mt-14 passwordField'>\r\n                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                <Typography className='fs-14 ff-Roboto fw-medium mb-7' color={colors.blackMain}>Password</Typography>\r\n                                <Typography style={{ cursor: 'pointer' }} onClick={onClickForgotPassword} className='fs-14 ff-Roboto fw-regular mb-7' color={'rgb(6, 29, 48, 0.5)'}>Forgot Password?</Typography>\r\n                            </div>\r\n                            <TextField\r\n                                fullWidth\r\n                                id='password'\r\n                                name='password'\r\n                                value={values.password.trim() || ''}\r\n                                onChange={(e) => {\r\n                                    handleChange(e);\r\n                                }}\r\n                                onBlur={(e) => {\r\n                                    handleBlur(e);\r\n                                }}\r\n                                type={visibility ? 'text' : 'password'}\r\n                                // error={touched.password && Boolean(errors.password)}\r\n                                // className={values.password ? 'helperTextStyleblack' : 'helperTextStylered'}\r\n                                // helperText={(touched.password) && showErrorPassword}\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position='end'>\r\n                                            {\r\n                                                <IconButton onClick={() => setVisibility(!visibility)}>\r\n                                                    {visibility ? <VisibilityOutlinedIcon /> : <VisibilityOffOutlinedIcon />}\r\n                                                </IconButton>\r\n                                            }\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Stack>\r\n                        <Button sx={{ ...buttonStyle1, marginBottom: '0' }} disabled={!isValid} type='submit'>Login</Button>\r\n                        <Stack direction='row' className='mt-16' justifyContent='center'>\r\n                            <Typography className='ff-OpenSans fw-regular fs-12' color={colors.gray}>Don't have an account </Typography>\r\n                            <Typography onClick={handleSignUpNavigate} className='ff-OpenSans fw-bold fs-12' color={colors.primaryDark} style={{ marginLeft: '11px', cursor: 'pointer' }}>Sign up</Typography>\r\n                        </Stack>\r\n                    </Stack>\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='loginContainer' style={{ padding: isMobile ? '16px' : '0', minHeight: isMobile ? 'auto' : '100vh' }}>\r\n            {\r\n                isMobile ?\r\n                    <div className='mobileViewContainer' style={{ minHeight: 'calc(100vh - 32px)' }}>\r\n                        <div style={{ backgroundImage: `url(${mobilewavybg})`, minHeight: 'calc(100vh - 32px)', backgroundPosition: 'center bottom', backgroundRepeat: 'no-repeat' }}>\r\n                            <div className='logoImg' style={{ marginLeft: '8px' }}>\r\n                                <img alt='dizLogo' src={dizlogoMobile} />\r\n                            </div>\r\n                            <div className='innerContainer' style={{ marginTop: '160px' }}>\r\n                                {loginForm({ ...formik })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <Stack style={{ maxWidth: '1368px', margin: 'auto', minHeight: '758.64px' }} direction='row' justifyContent='space-between'>\r\n                        <Stack className='leftStack' style={{ width: '100%' }}>\r\n                            <div className='logoImg'>\r\n                                <img style={{ visibility: 'hidden' }} alt='dizLogo' src={diztextlogo} />\r\n                            </div>\r\n                            <div className='detailContainer' style={{ backgroundImage: `url(${wavesbg})` }}>\r\n                            </div>\r\n                            <Stack className='formSubmittedStyle'>\r\n                                <div className='logoImg'>\r\n                                    <img alt='dizLogo' src={diztextlogo} />\r\n                                </div>\r\n                                <div style={{ marginTop: '13.541666666667vh' }}>\r\n                                    {loginForm({ ...formik })}\r\n                                </div>\r\n                            </Stack>\r\n                        </Stack>\r\n                    </Stack>\r\n            }\r\n            {\r\n                isMobile ?\r\n                    <Stack className='footer' direction='row' justifyContent='space-between'>\r\n                        <Stack className='socialContainer' direction='row'>\r\n                            {\r\n                                <SocialCard />\r\n                            }\r\n                        </Stack>\r\n                        <Typography className='fs-10 ff-Roboto fw-medium black dizcopyrights'>© 2022 Do it Zero Inc.</Typography>\r\n                    </Stack>\r\n                    :\r\n                    <Stack className='footerWeb'>\r\n                        <Stack className='socialContainer flex-justifycenter' style={{\r\n                            margin: '3.125vh auto 3.125vh'\r\n                        }} direction='row'>\r\n                            {\r\n                                <SocialCard />\r\n                            }\r\n                        </Stack>\r\n                        <Typography className='fs-10 ff-Roboto fw-medium black dizcopyrights'>© 2022 Do it Zero Inc.</Typography>\r\n                    </Stack>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n"],"names":["validationSchema","yup","email","matches","required","trim","password","Login","dispatch","useDispatch","isMobile","useMediaQuery","navigate","useNavigate","useState","visibility","setVisibility","data","undefined","showErrorEmail","setShowErrorEmail","formik","useFormik","enableReinitialize","validateOnMount","initialValues","validateOnBlur","validateOnChange","onSubmit","values","obj","setLoading","payload","emailId","deviceId","dataObj","appapi","response","ok","status","encryptedData","encrypt","JSON","stringify","localStorage","setItem","accessToken","login","showmessage","message","error","errors","replace","handleSignUpNavigate","onClickForgotPassword","Boolean","state","loginForm","handleSubmit","handleChange","touched","handleBlur","isValid","dirty","isSubmitting","Typography","className","color","colors","style","minHeight","Stack","TextField","fullWidth","id","name","value","toLowerCase","onChange","e","target","onBlur","flag","test","helperText","autoComplete","display","justifyContent","alignItems","cursor","onClick","type","InputProps","endAdornment","InputAdornment","position","IconButton","VisibilityOutlined","VisibilityOffOutlined","Button","sx","buttonStyle1","marginBottom","disabled","direction","marginLeft","padding","backgroundImage","mobilewavybg","backgroundPosition","backgroundRepeat","alt","src","dizlogoMobile","marginTop","maxWidth","margin","width","diztextlogo","wavesbg","SocialCard"],"sourceRoot":""}